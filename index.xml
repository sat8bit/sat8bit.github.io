<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>三日坊主。</title>
    <link>https://sat8bit.github.io/</link>
    <description>Recent content on 三日坊主。</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Thu, 01 Apr 2021 00:22:11 +0900</lastBuildDate>
    
        <atom:link href="https://sat8bit.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Daily/2021/04/01</title>
      <link>https://sat8bit.github.io/logs/daily-2021-04-01/</link>
      <pubDate>Thu, 01 Apr 2021 00:22:11 +0900</pubDate>
      
      <guid>https://sat8bit.github.io/logs/daily-2021-04-01/</guid>
      <description>&lt;h1 id=&#34;4-月になってしまいました&#34;&gt;4 月になってしまいました&lt;/h1&gt;
&lt;p&gt;早いもので４月１日ですね。エイプリルフールですね。特に嘘はありません。&lt;/p&gt;
&lt;h1 id=&#34;olivereelastic-v7-のエラー&#34;&gt;olivere/elastic v7 のエラー&lt;/h1&gt;
&lt;p&gt;この elastic のクライアントを使っている。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/olivere/elastic&#34;&gt;https://github.com/olivere/elastic&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;もともと、Client を DI のタイミングで作って渡して使いまわしてたんだけど、ClientFactory を作ってそれを Repository に DI し、処理の中で Client を作ることにした。&lt;/p&gt;
&lt;p&gt;理由として、&lt;code&gt;elastic.NewClient&lt;/code&gt; のタイミングで elastic への接続に失敗すると &lt;code&gt;nil&lt;/code&gt; を返却するので、接続成功するまでループ処理を書いていたんだけど、これが煩雑だった。&lt;/p&gt;
&lt;p&gt;が、暫くすると以下のエラーが出続けた。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;no active connection found: no Elasticsearch node available
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;elastic cloud&lt;/code&gt; を使っていて落ちることはほぼないので、なんでだろ、と思ってとりあえずバージョンを切り戻したら復旧した。&lt;br&gt;
で、原因調査。&lt;/p&gt;
&lt;p&gt;Google さんで検索すると、一番上に来るこの issue で Sniffing に関連して出ることがわかった。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/olivere/elastic/issues/817&#34;&gt;https://github.com/olivere/elastic/issues/817&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ところが、&lt;code&gt;elastic.SetSniff(false)&lt;/code&gt; は渡していた。なんぞ。&lt;/p&gt;
&lt;p&gt;で、この issue でわかったっぽい。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/olivere/elastic/issues/699&#34;&gt;https://github.com/olivere/elastic/issues/699&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;You should only create one client for your application. A Client is thread-safe and can be used by multiple goroutines concurrently. Every Client starts goroutines to watch the cluster and monitor the connections, so it&amp;rsquo;s rather expensive to create. You need to stop a Client if it&amp;rsquo;s no longer used.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;要約すると、Client はアプリケーションで一個しか作らないでね、とのこと。
Client を起動すると、内部で goroutine が起動してクラスタやコネクションを監視するそうです。&lt;/p&gt;
&lt;p&gt;なるほど、内部でめっちゃ goroutine 立ててたっぽい。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If you want a simple throwaway client, use NewSimpleClient.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;単純な使い捨てクライアントが必要な場合は、NewSimpleClient を使用してください。&lt;/p&gt;
&lt;h1 id=&#34;error-creating-overlay-mount-to&#34;&gt;error creating overlay mount to&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;docker-compose pull&lt;/code&gt; してたらこんなエラーが出た。
M1 起因かと思ったらそうでもないらしい。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://teratail.com/questions/122370&#34;&gt;https://teratail.com/questions/122370&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;でも &lt;code&gt;docker info&lt;/code&gt; したら 4 以降だったから別問題かな。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Kernel Version: 4.19.121-linuxkit
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;話題にあがりそうなストレージ周りはこんな感じ。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; Storage Driver: overlay2
  Backing Filesystem: extfs
  Supports d_type: true
  Native Overlay Diff: true
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;next&#34;&gt;Next&lt;/h1&gt;
</description>
    </item>
    
    <item>
      <title>Daily/2021/03/08</title>
      <link>https://sat8bit.github.io/logs/daily-2021-03-08/</link>
      <pubDate>Mon, 08 Mar 2021 22:14:09 +0900</pubDate>
      
      <guid>https://sat8bit.github.io/logs/daily-2021-03-08/</guid>
      <description>&lt;h1 id=&#34;homebrew-で入れた-mysql-client-が-path-の通るところにおかれない&#34;&gt;homebrew で入れた mysql-client が path の通るところにおかれない&lt;/h1&gt;
&lt;p&gt;この辺にある。リンクするコマンドとかありそうだが・・・？&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ find /opt/homebrew -name mysql                           
/opt/homebrew/Cellar/mysql-client/8.0.23/bin/mysql
/opt/homebrew/Cellar/mysql-client/8.0.23/include/mysql
/opt/homebrew/Cellar/mysql-client/8.0.23/include/mysql/mysql
/opt/homebrew/Cellar/mysql-client/8.0.23/share/mysql
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;link コマンドがあるらしいので実行してみたが駄目。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ brew link mysql-client
Warning: mysql-client is keg-only and must be linked with `--force`.

If you need to have this software first in your PATH instead consider running:
  echo &#39;export PATH=&amp;quot;/opt/homebrew/opt/mysql-client/bin:$PATH&amp;quot;&#39; &amp;gt;&amp;gt; ~/.zshrc
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;keg-only は、Homebrew の用語でインストールしてもパスを通さないフォーミュラだそう。&lt;br&gt;
&lt;a href=&#34;https://blog.wtsnjp.com/2019/09/20/brew-list2/&#34;&gt;https://blog.wtsnjp.com/2019/09/20/brew-list2/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;force って言われるとウッ・・って感じだけどリンクがあるほうが俄然便利なので &lt;code&gt;--force&lt;/code&gt; してしまう。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ brew link mysql-client --force
Linking /opt/homebrew/Cellar/mysql-client/8.0.23... 63 symlinks created.

If you need to have this software first in your PATH instead consider running:
  echo &#39;export PATH=&amp;quot;/opt/homebrew/opt/mysql-client/bin:$PATH&amp;quot;&#39; &amp;gt;&amp;gt; ~/.zshrc
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;パスが通った。&lt;/p&gt;
&lt;h1 id=&#34;todo&#34;&gt;[Todo]&lt;/h1&gt;
&lt;h1 id=&#34;その他&#34;&gt;その他&lt;/h1&gt;
&lt;h1 id=&#34;next&#34;&gt;Next&lt;/h1&gt;
</description>
    </item>
    
    <item>
      <title>Daily/2021/03/07</title>
      <link>https://sat8bit.github.io/logs/daily-2021-03-07/</link>
      <pubDate>Sun, 07 Mar 2021 22:30:59 +0900</pubDate>
      
      <guid>https://sat8bit.github.io/logs/daily-2021-03-07/</guid>
      <description>&lt;h1 id=&#34;private-repository-の-go-get-ができない&#34;&gt;Private Repository の go get ができない&lt;/h1&gt;
&lt;p&gt;go get でこんなエラーが出た。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;        fatal: &#39;origin&#39; does not appear to be a git repository
        fatal: Could not read from remote repository.

        Please make sure you have the correct access rights
        and the repository exists.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;同じ org の別リポジトリを go get してもエラーにならないのになんで・・・？&lt;br&gt;
検索したら、それっぽいのあった。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://qiita.com/yagrush/items/ddcbc718d1c6f60c0aac&#34;&gt;https://qiita.com/yagrush/items/ddcbc718d1c6f60c0aac&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;一部モジュールのチェックサムがおかしくなってしまったようです…&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;そういえばなんとなく依存解決してくれてるけど、 go mod がどんなディレクトリを掘ってどこに認証情報を持ってるとか、その辺考えてなかったな、、&lt;br&gt;
というか、認証情報とかがキャッシュされてるの気づかなかった。毎回とってるもんかと。どこかで時間とれれば勉強したい・・・&lt;/p&gt;
&lt;p&gt;ということで、&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ go clean -modcache
$ go get -u
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;をやったら治りました。超助かりました。&lt;/p&gt;
&lt;h1 id=&#34;その他&#34;&gt;その他&lt;/h1&gt;
&lt;h1 id=&#34;next&#34;&gt;Next&lt;/h1&gt;
</description>
    </item>
    
    <item>
      <title>Daily/2021/03/06</title>
      <link>https://sat8bit.github.io/logs/daily-2021-03-06/</link>
      <pubDate>Sat, 06 Mar 2021 23:46:18 +0900</pubDate>
      
      <guid>https://sat8bit.github.io/logs/daily-2021-03-06/</guid>
      <description>&lt;h1 id=&#34;mac-book-air-の-m1-が来た&#34;&gt;Mac Book Air の M1 が来た！&lt;/h1&gt;
&lt;p&gt;現状は特段困ってない。&lt;br&gt;
M1 の速さを享受するために無理矢理 M1 対応版を使うことはしていない。&lt;/p&gt;
&lt;p&gt;docker は rosetta2 上で動かないので、それはドキドキしたけど、M1 対応の preview 版があるので一旦大丈夫そう。&lt;br&gt;
様子見る。&lt;/p&gt;
&lt;p&gt;Go は 1.16 でネイティブ対応したとのこと。さすが嬉しい。&lt;/p&gt;
&lt;p&gt;brew で install するとき結構これ求められる。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ brew install protobuf
Error: Cannot install under Rosetta 2 in ARM default prefix (/opt/homebrew)!
To rerun under ARM use:
    arch -arm64 brew install ...
To install under x86_64, install Homebrew into /usr/local.
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;go-116-から追加された-embed-について&#34;&gt;Go 1.16 から追加された embed について&lt;/h1&gt;
&lt;p&gt;PC の入れ替えに引きづられて Go を 1.16 にしたので、メールのテンプレートを embed で読み出すようにしてみる。こんな感じ。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; (
	&lt;span style=&#34;color:#75715e&#34;&gt;// for embed template text
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;_&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;embed&amp;#34;&lt;/span&gt;
)

&lt;span style=&#34;color:#75715e&#34;&gt;//go:embed templates/mail.txt
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;mailTemplate&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;embed の import 忘れそう。。と、コメントを差し込まないと go-lint で警告が出る。_ での import は基本的に main か test で、ということらしい。&lt;/p&gt;
&lt;p&gt;これによって、ビルドのときに成果物に予め含んでおいてくれる。
存在しないファイルを指定したりするとビルド時に落としてくれる。&lt;/p&gt;
&lt;p&gt;以前は実行時に読み込むために、Dockerfile でテンプレートファイルを個別に ADD するようにしていたのでだいぶ楽だし、変に壊れる必要もないのが嬉しい。&lt;/p&gt;
&lt;h1 id=&#34;go-mod-vendor-がすべてのファイルを-vendor-配下においてくれない問題&#34;&gt;go mod vendor がすべてのファイルを vendor 配下においてくれない問題&lt;/h1&gt;
&lt;p&gt;PC が変わって環境構築してるときに、vend コマンドが見つからなかった。&lt;/p&gt;
&lt;p&gt;Makefile に突っ込んどいたと思ったんだけど忘れてて、あれどれだっけな、、と思って必死に探した。これ。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;go get github.com/nomad-software/vend
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;と思ったけど、なんか前も書いたなと思って grep したら &lt;a href=&#34;https://sat8bit.github.io/logs/daily-2021-01-20/&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;2021/01/20&lt;/a&gt;
 にログに書いてた。書いててよかった。&lt;/p&gt;
&lt;p&gt;ついでに protoc もなかった。これ。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://google.github.io/proto-lens/installing-protoc.html&#34;&gt;http://google.github.io/proto-lens/installing-protoc.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;protoc-gen-** もない。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://grpc.io/docs/languages/go/quickstart/&#34;&gt;https://grpc.io/docs/languages/go/quickstart/&lt;/a&gt;&lt;br&gt;
&lt;a href=&#34;https://github.com/grpc-ecosystem/grpc-gateway&#34;&gt;https://github.com/grpc-ecosystem/grpc-gateway&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;この辺まとめるとこうなる。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ go install \
    github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-grpc-gateway \
    github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2 \
    google.golang.org/protobuf/cmd/protoc-gen-go \
    google.golang.org/grpc/cmd/protoc-gen-go-grpc \
    github.com/mwitkow/go-proto-validators/protoc-gen-govalidators
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;その他&#34;&gt;その他&lt;/h1&gt;
&lt;h1 id=&#34;next&#34;&gt;Next&lt;/h1&gt;
</description>
    </item>
    
    <item>
      <title>Hugo と Github Pages でブログを作る</title>
      <link>https://sat8bit.github.io/posts/hugo-with-github-pages/</link>
      <pubDate>Tue, 09 Feb 2021 23:23:16 +0900</pubDate>
      
      <guid>https://sat8bit.github.io/posts/hugo-with-github-pages/</guid>
      <description>&lt;h1 id=&#34;概要&#34;&gt;概要&lt;/h1&gt;
&lt;p&gt;Hugo と Github Pages、及び Github Actions を使ってブログを作る。&lt;/p&gt;
&lt;h1 id=&#34;各仕組みの説明&#34;&gt;各仕組みの説明&lt;/h1&gt;
&lt;h2 id=&#34;hugo-について&#34;&gt;Hugo について&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://gohugo.io/&#34;&gt;https://gohugo.io/&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The world’s fastest framework for building websites&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;大雑把に言うと、静的コンテンツを生成する仕組み。ブログ形式以外にも色々できる。&lt;/p&gt;
&lt;p&gt;今回はこれを使って Markdown のテキストファイルからブログを作る。&lt;/p&gt;
&lt;h2 id=&#34;github-pages-について&#34;&gt;Github Pages について&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.github.com/ja/github/working-with-github-pages/about-github-pages&#34;&gt;https://docs.github.com/ja/github/working-with-github-pages/about-github-pages&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;GitHub Pages を使って、あなたやあなたの Organization、またはあなたのプロジェクトについてのウェブサイトを、GitHub リポジトリから直接ホストできます。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;大雑把に言うと、Github に push した静的なウェブコンテンツ（html, js, css, img, &amp;hellip;）を、ホストする仕組み。&lt;/p&gt;
&lt;p&gt;ホスティングのされ方は &lt;code&gt;https://&amp;lt;account&amp;gt;.github.io&lt;/code&gt; か、 &lt;code&gt;https://&amp;lt;account&amp;gt;.github.io/&amp;lt;repository&amp;gt;/&lt;/code&gt;。&lt;br&gt;
また、独自ドメインも設定できる。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;https://&amp;lt;account&amp;gt;.github.io&lt;/code&gt; を使うためには、&lt;code&gt;&amp;lt;account&amp;gt;.github.io&lt;/code&gt; というリポジトリを作成して、Pages の設定を行えば良い。&lt;br&gt;
上記の名前以外のリポジトリは &lt;code&gt;https://&amp;lt;account&amp;gt;.github.io/&amp;lt;repository&amp;gt;&lt;/code&gt; にホスティングされる。&lt;/p&gt;
&lt;p&gt;今回は前者の &lt;code&gt;https://&amp;lt;account&amp;gt;.github.io&lt;/code&gt; で構築する。&lt;/p&gt;
&lt;h2 id=&#34;github-actions-について&#34;&gt;Github Actions について&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.co.jp/features/actions&#34;&gt;https://github.co.jp/features/actions&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;GitHub Actions を使用すると、ワールドクラスの CI / CD ですべてのソフトウェアワークフローを簡単に自動化できます。 GitHub から直接コードをビルド、テスト、デプロイでき、コードレビュー、ブランチ管理、問題のトリアージを希望どおりに機能させます。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;大雑把に言うと、Github への push や merge、レビューなどのイベントに対してなにか処理（ワークフロー）を実行する仕組み。&lt;/p&gt;
&lt;p&gt;今回は、Markdown ファイルを push したら Hugo で静的コンテンツを生成して push するところまで、ワークフローで行う。&lt;br&gt;
既に先駆者の方がそれ用の Action を作成してくださっていて、使うだけなので難しいことはない。&lt;/p&gt;
&lt;h1 id=&#34;localhost-で-hugo-&#34;&gt;localhost で Hugo !&lt;/h1&gt;
&lt;h2 id=&#34;セットアップ&#34;&gt;セットアップ&lt;/h2&gt;
&lt;p&gt;まずは、&lt;a href=&#34;https://gohugo.io/getting-started/quick-start/&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;Quick start&lt;/a&gt;
 に沿ってインストールを行う。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ brew install hugo
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;さっそくサイトを構築する。&lt;br&gt;
今回ホスティングの関係で、サイト名は各人で固定になるはず。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ hugo new site sat8bit.github.io
$ cd sat8bit.github.io
$ git init .
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;hugo はデフォルトで theme が入っていないので、このままだと動かない。以下のサイトからテンプレートを選ぶ。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://themes.gohugo.io/&#34;&gt;https://themes.gohugo.io/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;今回は Quick start に沿って &lt;a href=&#34;https://themes.gohugo.io/gohugo-theme-ananke/&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;Ananke theme&lt;/a&gt;
 を利用する。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git submodule add https://github.com/budparr/gohugo-theme-ananke.git themes/ananke
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;theme を反映するためには config.toml に記述する必要があるので、以下を追加する。&lt;br&gt;
名称は &lt;code&gt;themes&lt;/code&gt; 配下のディレクトリ名。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-diff&#34; data-lang=&#34;diff&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;+theme = &amp;#34;ananke&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;&lt;/span&gt; baseURL = &amp;#34;http://example.org/&amp;#34;
 languageCode = &amp;#34;en-us&amp;#34;
 title = &amp;#34;My New Hugo Site&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;ここまで終わったら、local で起動してみる。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ hugo serve
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;上記コマンドで出力された URL にアクセスすると、以下の画面が表示される。&lt;/p&gt;
&lt;p&gt;&lt;img  src=&#34;https://sat8bit.github.io/images/2021-02-09-23-44-24.png&#34;
        alt/&gt;&lt;/p&gt;
&lt;h2 id=&#34;ブログを追加する&#34;&gt;ブログを追加する&lt;/h2&gt;
&lt;p&gt;Hugo は &lt;code&gt;hugo new &amp;lt;category&amp;gt;/&amp;lt;filename&amp;gt;.&amp;lt;filetype&amp;gt;&lt;/code&gt; というコマンドでコンテンツを生成できる。&lt;br&gt;
またデフォルトでは &lt;code&gt;posts&lt;/code&gt; カテゴリがトップページにリスティングされる。&lt;/p&gt;
&lt;p&gt;なので、例えば hello-world という記事を書くときはこんなコマンドになる。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ hugo new posts/hello-world.md
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;こんなファイルが生成される。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ cat content/posts/hello-world.md
---
title: &amp;quot;Hello World&amp;quot;
date: 2021-02-09T23:50:59+09:00
draft: true
---
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;---&lt;/code&gt; で挟まれた部分はメタ情報になるので、その下に記事を書いていく。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-diff&#34; data-lang=&#34;diff&#34;&gt; draft: true
 ---

&lt;span style=&#34;color:#a6e22e&#34;&gt;+# Hello! World.
&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;+
&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;+こんにちは、世界。
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;この状態で &lt;code&gt;hugo serve&lt;/code&gt; を実行しても、記事は表示されない。メタ情報の &lt;code&gt;draft&lt;/code&gt; が &lt;code&gt;true&lt;/code&gt; になっていて、下書き扱いになっているからである。&lt;/p&gt;
&lt;p&gt;下書きを確認するために以下のコマンドで hugo を起動する。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;hugo serve -D
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img  src=&#34;https://sat8bit.github.io/images/2021-02-09-23-56-41.png&#34;
        alt/&gt;&lt;/p&gt;
&lt;p&gt;表示される。&lt;/p&gt;
&lt;p&gt;つまり、記事を書いて、ローカルでの確認が終わったらファイル側のメタ情報の &lt;code&gt;draft&lt;/code&gt; を削除するか、&lt;code&gt;false&lt;/code&gt; にすれば公開、というサイクルになる。&lt;/p&gt;
&lt;h2 id=&#34;静的コンテンツの生成&#34;&gt;静的コンテンツの生成&lt;/h2&gt;
&lt;p&gt;今回は Github Actions でやるので、手でやることはないが一応触っておいたほうが良いと思う。&lt;/p&gt;
&lt;p&gt;以下のコマンドを実行すると、 &lt;code&gt;public&lt;/code&gt; 配下に静的コンテンツが生成される。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ hugo
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;確認。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;public
├── 404.html
├── ananke
│   └── dist
│       └── main.css_5c99d70a7725bacd4c701e995b969fea.css
├── categories
│   ├── index.html
│   └── index.xml
├── images
│   └── gohugo-default-sample-hero-image.jpg
├── index.html
├── index.xml
├── sitemap.xml
└── tags
    ├── index.html
    └── index.xml
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;このディレクトリをホスティングすることで、ブログを公開する。&lt;/p&gt;
&lt;p&gt;なお、今回はお試しなので生成されたファイルは削除する。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ rm -rf public
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;github-actions-で-静的コンテンツを生成して-push-する&#34;&gt;Github Actions で 静的コンテンツを生成して Push する&lt;/h1&gt;
&lt;p&gt;既に Actions があるので、これを使って設定を行っていく。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/peaceiris/actions-hugo&#34;&gt;https://github.com/peaceiris/actions-hugo&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;と言っても、上の README を参考に設定していけば動く。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;github pages&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;on&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;push&lt;/span&gt;:
    &lt;span style=&#34;color:#f92672&#34;&gt;branches&lt;/span&gt;:
      - &lt;span style=&#34;color:#ae81ff&#34;&gt;master&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# Set a branch to deploy&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;jobs&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;deploy&lt;/span&gt;:
    &lt;span style=&#34;color:#f92672&#34;&gt;runs-on&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;ubuntu-18.04&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;steps&lt;/span&gt;:
      - &lt;span style=&#34;color:#f92672&#34;&gt;uses&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;actions/checkout@v2&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;with&lt;/span&gt;:
          &lt;span style=&#34;color:#f92672&#34;&gt;submodules&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# Fetch Hugo themes (true OR recursive)&lt;/span&gt;
          &lt;span style=&#34;color:#f92672&#34;&gt;fetch-depth&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# Fetch all history for .GitInfo and .Lastmod&lt;/span&gt;

      - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Setup Hugo&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;uses&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;peaceiris/actions-hugo@v2&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;with&lt;/span&gt;:
          &lt;span style=&#34;color:#f92672&#34;&gt;hugo-version&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;0.79.1&amp;#34;&lt;/span&gt;
          &lt;span style=&#34;color:#75715e&#34;&gt;# extended: true&lt;/span&gt;

      - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Build&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;run&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;hugo&lt;/span&gt;

      - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Deploy&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;uses&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;peaceiris/actions-gh-pages@v3&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;with&lt;/span&gt;:
          &lt;span style=&#34;color:#f92672&#34;&gt;github_token&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;${{ secrets.GITHUB_TOKEN }}&lt;/span&gt;
          &lt;span style=&#34;color:#f92672&#34;&gt;publish_dir&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;./public&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;上記のファイルを &lt;code&gt;.github/workflows/gh-pages.yml&lt;/code&gt; とかの名前で保存しておしまい。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;gh-pages.yml&lt;/code&gt; のファイル名は変更してよいが、&lt;code&gt;.github/workflows&lt;/code&gt; は Actions のファイルの置き場所なので変更しない。&lt;/p&gt;
&lt;p&gt;Github に push したら、Github 上の Actions タブで実際に動作したか確認する。&lt;/p&gt;
&lt;p&gt;&lt;img  src=&#34;https://sat8bit.github.io/images/2021-02-15-01-05-39.png&#34;
        alt/&gt;&lt;/p&gt;
&lt;p&gt;こんな感じで緑のチェックになってれば OK。&lt;/p&gt;
&lt;p&gt;gh-pages というブランチに push されているので、確認する。&lt;/p&gt;
&lt;p&gt;&lt;img  src=&#34;https://sat8bit.github.io/images/2021-02-15-01-06-23.png&#34;
        alt/&gt;&lt;/p&gt;
&lt;h1 id=&#34;github-pages-を設定して公開する&#34;&gt;Github Pages を設定して公開する&lt;/h1&gt;
&lt;p&gt;最後に公開する設定を行う。&lt;/p&gt;
&lt;p&gt;Settings タブを開くと Options が選択された状態で開くので、下部の &lt;code&gt;GitHub Pages&lt;/code&gt; で Source を &lt;code&gt;gh-pages&lt;/code&gt; に変更する。&lt;/p&gt;
&lt;p&gt;公開するディレクトリだけを push しているので、 / (root) を選択して &lt;code&gt;Save&lt;/code&gt; する。&lt;/p&gt;
&lt;p&gt;&lt;img  src=&#34;https://sat8bit.github.io/images/2021-02-15-01-08-54.png&#34;
        alt/&gt;&lt;/p&gt;
&lt;p&gt;公開設定をしても、暫くは表示されないのでちょっとまってから以下の URL にアクセスする。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;https://&amp;lt;account名&amp;gt;.github.io
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;設定画面にリンクが表示されるはずなので、そこを押すほうが確実。&lt;/p&gt;
&lt;p&gt;上記で設定が整ったら、あとは Markdown でメモとか書いて適当に Push すれば良さそうです。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Firebase Tutorial</title>
      <link>https://sat8bit.github.io/posts/firebase-tutorial/</link>
      <pubDate>Tue, 09 Feb 2021 22:07:53 +0900</pubDate>
      
      <guid>https://sat8bit.github.io/posts/firebase-tutorial/</guid>
      <description>&lt;h1 id=&#34;概要&#34;&gt;概要&lt;/h1&gt;
&lt;p&gt;Firebase を使って色々やるチュートリアル。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Firebase は、高品質のアプリを迅速に開発できる Google のモバイル プラットフォームで、ビジネスの成長に役立ちます。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;事前準備プロジェクトの作成と開発の準備&#34;&gt;事前準備：プロジェクトの作成と開発の準備&lt;/h1&gt;
&lt;h2 id=&#34;プロジェクトの作成&#34;&gt;プロジェクトの作成&lt;/h2&gt;
&lt;p&gt;トップページから、プロジェクトを作る。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://console.firebase.google.com/&#34;&gt;http://console.firebase.google.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;愛着が湧く名前が良いと思う。今回は &lt;code&gt;matomelien&lt;/code&gt; とした。まとめサイト関連のサービス作るの好き。&lt;/p&gt;
&lt;h2 id=&#34;リポジトリの整備&#34;&gt;リポジトリの整備&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;git&lt;/code&gt; のリポジトリを整備していく。&lt;/p&gt;
&lt;p&gt;Firebase では、一つのリポジトリに Firebase の各サービスに対するソースコードをまとめる構成がとれそうなので、まとめる。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ROOT/
├── functions  // Firebase Functions
...
└── public     // Firebase Hosting
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;プロジェクト名でディレクトリを作って &lt;code&gt;git init .&lt;/code&gt; しておく。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ mkdir matomelien
$ cd matomelien
$ git init .
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;以降はこのディレクトリをルートとする。&lt;/p&gt;
&lt;h2 id=&#34;firebase-cli-のインストール&#34;&gt;Firebase CLI のインストール&lt;/h2&gt;
&lt;p&gt;node 及び npm のインストール手順はここでは割愛する。&lt;/p&gt;
&lt;p&gt;Global に firebase-tools をインストールしておく。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ npm install -g firebase-tools
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;以降は以下のバージョンを使って作業をしている。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ node --version
v14.14.0
$ npm --version
6.14.8
$ firebase --version
9.3.0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;プロジェクトの初期化&#34;&gt;プロジェクトの初期化&lt;/h2&gt;
&lt;p&gt;チュートリアルに沿って以下のコマンドでログインする。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ firebase login
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;functions-で-api-を作る&#34;&gt;Functions で API を作る&lt;/h1&gt;
&lt;p&gt;今回は TypeScript を使う前提で進める。&lt;/p&gt;
&lt;p&gt;ドキュメント：https://firebase.google.com/docs/functions/&lt;/p&gt;
&lt;h2 id=&#34;functions-の初期化&#34;&gt;Functions の初期化&lt;/h2&gt;
&lt;p&gt;以下のコマンドを実行する。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;firebase init functions
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;すると、まずどうやってプロジェクトを作成するか聞かれる。今回は既に &lt;code&gt;matomelien&lt;/code&gt; を作成済なので、&lt;code&gt;Use an exists project&lt;/code&gt; を選択。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;? Please select an option:
❯ Use an existing project
  Create a new project
  Add Firebase to an existing Google Cloud Platform project
  Don&#39;t set up a default project
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;ログインしているユーザに紐づく Project の一覧を出してくれるので、選択。上は typo したやつ。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;? Select a default Firebase project for this directory: (Use arrow keys)
  matomelian (matomelian)
❯ matomelien (matomelien)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;言語選び。TypeScript を選択。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;? What language would you like to use to write Cloud Functions?
  JavaScript
❯ TypeScript
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;ESLint は私の場合は入れておく。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;? Do you want to use ESLint to catch probable bugs and enforce style? (Y/n)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;npm install&lt;/code&gt; していい？と聞かれるのでまぁそのまま OK。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;✔  Wrote functions/package.json
✔  Wrote functions/.eslintrc.js
✔  Wrote functions/tsconfig.json
✔  Wrote functions/tsconfig.dev.json
✔  Wrote functions/src/index.ts
✔  Wrote functions/.gitignore
? Do you want to install dependencies with npm now? (Y/n)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;完了すると、雛形を一通り作成してくれる。これで初期化は完了。&lt;/p&gt;
&lt;h2 id=&#34;http-request-で起動する-hello-world-の-local-実行と-deploy&#34;&gt;Http Request で起動する Hello World! の local 実行と Deploy&lt;/h2&gt;
&lt;p&gt;functions/src/index.ts で export した function が deploy される。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;functions/src/index.ts&lt;/code&gt; にコメントアウトされた雛形があるので、このコメントアウトを外してみる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-diff&#34; data-lang=&#34;diff&#34;&gt; import * as functions from &amp;#34;firebase-functions&amp;#34;;

&lt;span style=&#34;color:#f92672&#34;&gt;-// // Start writing Firebase Functions
&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-// // https://firebase.google.com/docs/functions/typescript
&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-//
&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-// export const helloWorld = functions.https.onRequest((request, response) =&amp;gt; {
&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-//   functions.logger.info(&amp;#34;Hello logs!&amp;#34;, {structuredData: true});
&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-//   response.send(&amp;#34;Hello from Firebase!&amp;#34;);
&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-// });
&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;+// Start writing Firebase Functions
&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;+// https://firebase.google.com/docs/functions/typescript
&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;+
&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;+export const helloWorld = functions.https.onRequest((request, response) =&amp;gt; {
&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;+  functions.logger.info(&amp;#34;Hello logs!&amp;#34;, {structuredData: true});
&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;+  response.send(&amp;#34;Hello from Firebase!&amp;#34;);
&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;+});
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;localhost で実行する前に TypeScript だと build してトランスパイルする必要があるので、行う。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://firebase.google.com/docs/functions/typescript?hl=ja#emulating_typescript_functions&#34;&gt;https://firebase.google.com/docs/functions/typescript?hl=ja#emulating_typescript_functions&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ cd functions
$ npm run build
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;成功したら、以下のコマンドを使って emulator を起動する。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ firebase emulators:start
（略）
✔  functions[helloWorld]: http function initialized (http://localhost:5001/matomelien/us-central1/helloWorld).
（略）
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;上の表にある URL にアクセスする。&lt;/p&gt;
&lt;p&gt;&lt;img  src=&#34;https://sat8bit.github.io/images/2021-02-09-22-47-04.png&#34;
        alt/&gt;&lt;/p&gt;
&lt;p&gt;動いてることが確認できたので、実際に本番にデプロイする。&lt;br&gt;
ここでエラーが。有料プランにあげてって言われている。前無料でできたのにな・・・&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ firebase deploy --only functions
（略）
Error: Your project matomelien must be on the Blaze (pay-as-you-go) plan to complete this command. Reqthis command. Required API cloudbuild.googleapis.com can&#39;t be enabled until the upgras cograde, visit uired API cloudbuild.googleapis.com cde is complete. To upgrade, visit the following URL:

https://console.firebase.google.com/project/matomelien/usage/details
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;調べたら元々 &lt;code&gt;Node8&lt;/code&gt; のランタイムを無料プランで提供してたけど、それが去年非推奨になって &lt;code&gt;Node10&lt;/code&gt; 以降でしか使えなくなった。&lt;br&gt;
&lt;code&gt;Node10&lt;/code&gt; 以降は Blaze（従量課金プラン）でしか提供していない模様。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://qiita.com/azukiazusa/items/edd6ca9cba2d48c4c3e2&#34;&gt;https://qiita.com/azukiazusa/items/edd6ca9cba2d48c4c3e2&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Pricing はここ。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://firebase.google.com/pricing&#34;&gt;https://firebase.google.com/pricing&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Daily/2021/02/08</title>
      <link>https://sat8bit.github.io/logs/daily-2021-02-08/</link>
      <pubDate>Mon, 08 Feb 2021 22:02:35 +0900</pubDate>
      
      <guid>https://sat8bit.github.io/logs/daily-2021-02-08/</guid>
      <description>&lt;h1 id=&#34;api-作る&#34;&gt;API 作る&lt;/h1&gt;
&lt;p&gt;全体のアーキテクチャ見直しを案件があるたびにしてきたけど、一段落ついた感じがする。&lt;/p&gt;
&lt;p&gt;どっかでまとめたい。&lt;/p&gt;
&lt;p&gt;今日は特につまりどころもなくスムーズに開発が進みました。&lt;/p&gt;
&lt;h1 id=&#34;その他&#34;&gt;その他&lt;/h1&gt;
&lt;h2 id=&#34;todo-から-done-を削除する&#34;&gt;Todo から Done を削除する&lt;/h2&gt;
&lt;p&gt;やろうと思ってたことを書き出すだけでいい気がする。というかほとんど Done を書いてない。&lt;/p&gt;
&lt;p&gt;そうなってくると、最初に見出しを書けばよいのであって、そもそも Todo という項目がいらない気がしたので、ばっさり削除することにする。&lt;/p&gt;
&lt;p&gt;最近中途半端な文章が中途半端に残っているだけになってしまっているので、ちゃんと書こう。&lt;/p&gt;
&lt;p&gt;そして書かないときは書かなくても良いじゃないの。&lt;/p&gt;
&lt;h2 id=&#34;文章をちゃんと書くために&#34;&gt;文章をちゃんと書くために&lt;/h2&gt;
&lt;p&gt;記事に画像を差し込む仕組みをちゃんと構築しないといけない。&lt;/p&gt;
&lt;p&gt;イメージ的には、&lt;code&gt;Cmd + Shift + Ctrl + 4&lt;/code&gt; でクリップボードに切り出したスクリーンショットを、なんらかのショートカットでペーストできれば良い。&lt;/p&gt;
&lt;p&gt;実はそれ自体はできそうなプラグインを既に VSCode には入れてあるんだけど、設定がちゃんとできていない。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/mushanshitiancai/vscode-paste-image&#34;&gt;https://github.com/mushanshitiancai/vscode-paste-image&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;イメージ的には &lt;code&gt;projectRootDir/static/images/XXXXX.png&lt;/code&gt; にファイルが置かれて、Paste したときの URL が &lt;code&gt;/images/XXXX.png&lt;/code&gt; になって欲しい。&lt;/p&gt;
&lt;p&gt;結論から言うと、できたのはこれ。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;{
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;pasteImage.basePath&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;${projectRoot}/static&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;pasteImage.prefix&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;pasteImage.path&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;${projectRoot}/static/images&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;pasteImage.forceUnixStyleSeparator&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;というか実は何も目新しいことやってなくて、さぁ本気で設定するぞ、と意気込んで、プラグインの README を読んだらやりたいことそのまま書いてあった。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/mushanshitiancai/vscode-paste-image#config-example&#34;&gt;https://github.com/mushanshitiancai/vscode-paste-image#config-example&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;こういうこと多い。&lt;/p&gt;
&lt;h1 id=&#34;next&#34;&gt;Next&lt;/h1&gt;
</description>
    </item>
    
    <item>
      <title>Daily/2021/02/06</title>
      <link>https://sat8bit.github.io/logs/daily-2021-02-06/</link>
      <pubDate>Sat, 06 Feb 2021 22:14:05 +0900</pubDate>
      
      <guid>https://sat8bit.github.io/logs/daily-2021-02-06/</guid>
      <description>&lt;h1 id=&#34;todo&#34;&gt;Todo&lt;/h1&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Todo&lt;/th&gt;
&lt;th&gt;Done&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;API 作る&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1 id=&#34;log&#34;&gt;Log&lt;/h1&gt;
&lt;h2 id=&#34;api-作る&#34;&gt;API 作る&lt;/h2&gt;
&lt;p&gt;大体フレームはできてきたがエラーハンドリング周りがうまくいってないので引き続き調べる。&lt;/p&gt;
&lt;h3 id=&#34;gorm-の-delete&#34;&gt;gorm の Delete&lt;/h3&gt;
&lt;p&gt;gorm の DELETE 処理を以下のように書いた。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;	if err := conn.Delete(models.GroupMember{}).Where(&amp;quot;group_id = ?&amp;quot;, d.ID()).Error; err != nil {
		return err
	}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;発行された SQL がこれ。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;DELETE FROM `group_members`
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;全消ししてますやん。実装間違えてる。。&lt;/p&gt;
&lt;p&gt;gorm の ドキュメントを改めて読んで見る。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://gorm.io/ja_JP/docs/delete.html#Block-Global-Delete&#34;&gt;https://gorm.io/ja_JP/docs/delete.html#Block-Global-Delete&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;If you perform a batch delete without any conditions, GORM WON’T run it, and will return ErrMissingWhereClause error

You have to use some conditions or use raw SQL or enable AllowGlobalUpdate mode, for example:
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;あれ、なんか AllowGlobalUpdate mode じゃないと動かないって書いてあるけど、、うん？&lt;/p&gt;
&lt;p&gt;引数がポインタじゃないのが関係するのか？と思ってやってみたけどだめ。バージョンかな。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://gorm.io/docs/v2_release_note.html&#34;&gt;https://gorm.io/docs/v2_release_note.html&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;GORM V2 enabled BlockGlobalUpdate mode by default, to trigger a global update/delete, you have to use some conditions or use raw SQL or enable AllowGlobalUpdate mode, for example:
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;使ってるの 1.9.12 だった。古すぎる・・・&lt;/p&gt;
&lt;p&gt;最新版入れたらエラーになった箇所を並べていく。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;if gorm.IsRecordNotFoundError(err) {
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;これは、最新版だと errors.Is で比較する。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;errors.Is(err, gorm.ErrRecordNotFound)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Transaction 周りだと defer で呼んでた Close がなくなってた。不要になったのかしら。&lt;/p&gt;
&lt;p&gt;と思ったけど Close 消したら Connection が切れないなこれ。&lt;/p&gt;
&lt;p&gt;一回 DB() で取得した後に Close が必要とのことでした。&lt;/p&gt;
&lt;p&gt;connection 作るところも変わってた。浦島状態。。。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;	db, err := gorm.Open(&amp;quot;mysql&amp;quot;,
		fmt.Sprintf(&amp;quot;%s:%s@tcp(%s:%s)/%s?charset=utf8&amp;amp;parseTime=true&amp;amp;loc=Asia%%2FTokyo&amp;quot;,
			d.user, d.password, d.host, d.port, d.dbname))
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;a href=&#34;https://gorm.io/ja_JP/docs/connecting_to_the_database.html&#34;&gt;https://gorm.io/ja_JP/docs/connecting_to_the_database.html&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;	// &amp;quot;gorm.io/driver/mysql&amp;quot; を import する

	db, err := gorm.Open(mysql.Open(
		fmt.Sprintf(&amp;quot;%s:%s@tcp(%s:%s)/%s?charset=utf8&amp;amp;parseTime=true&amp;amp;loc=Asia%%2FTokyo&amp;quot;,
			d.user, d.password, d.host, d.port, d.dbname)))
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Logger 周りだったり諸々修正してとりあえず動くとこまで確認できた。&lt;/p&gt;
&lt;h2 id=&#34;todo-1&#34;&gt;[Todo]&lt;/h2&gt;
&lt;h2 id=&#34;その他作業中に発生したこと&#34;&gt;その他作業中に発生したこと&lt;/h2&gt;
&lt;h2 id=&#34;next&#34;&gt;Next&lt;/h2&gt;
</description>
    </item>
    
    <item>
      <title>Daily/2021/02/04</title>
      <link>https://sat8bit.github.io/logs/daily-2021-02-04/</link>
      <pubDate>Thu, 04 Feb 2021 22:55:49 +0900</pubDate>
      
      <guid>https://sat8bit.github.io/logs/daily-2021-02-04/</guid>
      <description>&lt;h1 id=&#34;todo&#34;&gt;Todo&lt;/h1&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Todo&lt;/th&gt;
&lt;th&gt;Done&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;API 作る&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1 id=&#34;log&#34;&gt;Log&lt;/h1&gt;
&lt;h2 id=&#34;api作る&#34;&gt;API作る&lt;/h2&gt;
&lt;p&gt;今日はせっせとAPIを作る日。&lt;/p&gt;
&lt;h2 id=&#34;その他作業中に発生したこと&#34;&gt;その他作業中に発生したこと&lt;/h2&gt;
&lt;h2 id=&#34;新しい-mac-book-が欲しい&#34;&gt;新しい Mac Book が欲しい！&lt;/h2&gt;
&lt;p&gt;ことの発端はディスクがフルになったこと。&lt;/p&gt;
&lt;p&gt;さて困った。&lt;/p&gt;
&lt;p&gt;リスク背負いつつ20000円かけて1TBに換装するか、36000円の下取りでM1のMBAを買うか。&lt;/p&gt;
&lt;p&gt;とりあえずファイルを消しながらギリギリこらえてるけどさすがに128GBはもう限界である&lt;/p&gt;
&lt;h2 id=&#34;next&#34;&gt;Next&lt;/h2&gt;
</description>
    </item>
    
    <item>
      <title>Daily/2021/01/31</title>
      <link>https://sat8bit.github.io/logs/daily-2021-01-31/</link>
      <pubDate>Sun, 31 Jan 2021 03:25:29 +0900</pubDate>
      
      <guid>https://sat8bit.github.io/logs/daily-2021-01-31/</guid>
      <description>&lt;h1 id=&#34;todo&#34;&gt;Todo&lt;/h1&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Todo&lt;/th&gt;
&lt;th&gt;Done&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;アーキテクチャ見直しの話&lt;/td&gt;
&lt;td&gt;o&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1 id=&#34;log&#34;&gt;Log&lt;/h1&gt;
&lt;h2 id=&#34;アーキテクチャ見直しの話&#34;&gt;アーキテクチャ見直しの話&lt;/h2&gt;
&lt;h3 id=&#34;frontend--backend-が-1-アプリケーション&#34;&gt;Frontend + Backend が 1 アプリケーション&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;user-service / cms-service / chat-service&lt;/code&gt; みたいな操作する対象っぽいもので区切ってたやつ。&lt;/p&gt;
&lt;p&gt;外からのリクエストは &lt;code&gt;Ingress&lt;/code&gt; あたりでルーティングするので１ドメインだけど、内部的には入り口から小分けになってる。&lt;/p&gt;
&lt;p&gt;デメリットは、内部だけで使いたい API みたいなのを作り始めると管理がしんどい&lt;/p&gt;
&lt;p&gt;例えば &lt;code&gt;chat-service&lt;/code&gt; で内部的にユーザ情報を &lt;code&gt;user-service&lt;/code&gt; から引きたいときに &lt;code&gt;userID&lt;/code&gt; を識別子として渡したいが、そんな API は外向きには開けたくないみたいな感じ。&lt;/p&gt;
&lt;h3 id=&#34;frontend--backend-が-1-グループで内部で更に分ける&#34;&gt;Frontend + Backend が 1 グループで内部で更に分ける&lt;/h3&gt;
&lt;p&gt;Frontend + Backend が 1 アプリケーションの、アプリケーションが fe / be とかで別れてるやつ。be は CRUD 操作だけ、それを使って fe でユースケースを作る。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;(user-fe / user-be) / (cms-fe / cms-be) / (chat-fe / chat-be)&lt;/code&gt; みたいな感じ。&lt;/p&gt;
&lt;p&gt;人数が多いのであればこれでもいいんだと思う。&lt;/p&gt;
&lt;p&gt;人数が少ない場合、共通化とかし始めてそれの反映とかに追われがち。&lt;/p&gt;
&lt;h3 id=&#34;frontend-を出面でまとめてbackend-を小分けにする&#34;&gt;Frontend を出面でまとめて、Backend を小分けにする&lt;/h3&gt;
&lt;p&gt;今までと違って、出面で Frontend をまとめる。&lt;code&gt;Front(web-api, cms-api) / Backend(user-be / cms-be / chat-be)&lt;/code&gt; みたいな感じ。Backend は CRUD 操作だけ。&lt;/p&gt;
&lt;p&gt;フロントの都合で勝手にユースケースを組めるので、比較的やりやすいかなって思った。&lt;/p&gt;
&lt;p&gt;ただ実際やってみてわかったのは、ユースケースは大体似通うので、同じようなコードが生まれがち。こぴぺで横から持ってくる。&lt;/p&gt;
&lt;h3 id=&#34;frontend-を出面でまとめてbackend-は概念的に小分けにする&#34;&gt;Frontend を出面でまとめて、Backend は概念的に小分けにする&lt;/h3&gt;
&lt;p&gt;Frontend を出面でまとめて、 Backend を小分けにする の Backend が一つのアプリケーションにまとまっているというだけ。&lt;/p&gt;
&lt;p&gt;Backend レイヤで共通で使いたいロジックとかが結構出てくるので、まとまってるほうが都合が良かった。&lt;/p&gt;
&lt;h3 id=&#34;認証の-frontend--all-in-one-backend&#34;&gt;認証の Frontend + All in One Backend&lt;/h3&gt;
&lt;p&gt;Frontend を出面でまとめて、Backend はひとつにまとめる案。 CRUD 操作だけのものを作っても、結局ユースケースによって前提となる処理があるので、それを 各 Frontend に実装するのが億劫になった。&lt;/p&gt;
&lt;p&gt;ユースケースを全部 Backend で切って、外からのアクセスに対しての認証とか、セッション検証とかだけ Frontend でする。&lt;/p&gt;
&lt;p&gt;Backend を切り出しておくのは、認証を切り離したレイヤを用意しとくことで、バッチ処理とかでユースケース呼びたいときに使えるようにしておく。&lt;/p&gt;
&lt;p&gt;ので、Backend では「誰のアクセスか」みたいな部分は検証しない。（必要に応じてロギングする）&lt;/p&gt;
&lt;h3 id=&#34;どうしてこうなった&#34;&gt;どうしてこうなった&lt;/h3&gt;
&lt;p&gt;アプリケーション側のクラス設計がちゃんと作れてなかったときに、モノリシックなアプリケーションを作ったら煩雑なものになった。&lt;/p&gt;
&lt;p&gt;内部でぐちゃぐちゃしてシンプルを保てないので、アプリケーションを小分けにすることでシンプルにならないか模索してきた。&lt;/p&gt;
&lt;p&gt;ただ、実際は人がたくさんいる会社だからできていたのであって、人が少ないところでやるものではないなってのがわかってきた。&lt;/p&gt;
&lt;p&gt;また、user とかそんな小さい単位で単純に小分けにするのではなく、もうちょっと大きい概念で分けておくのが正しそう。サービス単位とか。&lt;/p&gt;
&lt;h2 id=&#34;その他作業中に発生したこと&#34;&gt;その他作業中に発生したこと&lt;/h2&gt;
&lt;h2 id=&#34;next&#34;&gt;Next&lt;/h2&gt;
</description>
    </item>
    
  </channel>
</rss>